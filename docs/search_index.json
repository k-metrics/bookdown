[["index.html", "Rのすゝめ - Rによるデータ分析事始め - License", " Rのすゝめ - Rによるデータ分析事始め - Sampo Suzuki, CC 4.0 BY-NC-SA 2021-05-06 License 本書は [クリエイティブ・コモンズ 表示 - 非営利 - 継承 4.0 国際 ライセンス] の下に提供されています。 あなたの従うべき条件は以下の通りです。 表示（BY） あなたは 適切なクレジットを表示し、ライセンスへのリンクを提供し、変更があったらその旨を示さなければなりません。これらは合理的であればどのような方法で行っても構いませんが、許諾者があなたやあなたの利用行為を支持していると示唆するような方法は除きます。 非営利（NC） あなたは営利目的でこの資料を利用してはなりません。 継承（SA） もしあなたがこの資料をリミックスしたり、改変したり、加工した場合には、あなたはあなたの貢献部分を元の作品と同じライセンスの下に頒布しなければなりません。 CC 4.0 BY-NC-SA ただし、本書にて引用している文書、図、ロゴなどの権利は原著作者が保有しています。 "],["はじめに.html", "はじめに", " はじめに ソフトウェア開発において「データに基づく品質管理」が必要と言われるようになってから久しくなりますが、様々な理由でデータに基づく管理を実践している組織はまだまだ少数派ではないでしょうか？しかし、世の中の流れは「データドリブン」というキーワードに代表されるようにデータを使いこなせる組織が優位に立てる時代、数学が利益を生み出す数理資本主義の時代と言われています。 [『データ指向のソフトウェア品質マネジメント』] は、日本のソフトウェア品質管理におけるデータ管理の必要性とデータ分析に必要な知識を解説している数少ない書籍です。この書籍の著者の一人である小池氏が主催している [データ分析勉強会] では、メトリクス分析に興味をもつ有志が統計分析を実践するために統計的コンピューティングを中心に様々な知識や手法を学んでいます。 本書は実務でメトリクス分析を行いたいソフトウェア品質技術者をはじめとした統計的コンピューティングに興味を持っている方々に [R言語] の基本的な知識を紹介しています。データ分析勉強会を通じて学んだ分析手法を実務で実践したい方の一助になれば幸いです。 "],["想定読者.html", "想定読者", " 想定読者 本書は統計的コンピューティングに興味があり基本的なコンピュータの知識と基礎的な統計の知識を有している方々を読者として想定しています。本書では [R言語] を実行するための環境構築に関する詳細な解説は行いませんの「で、R言語のインストール手順などは市販の書籍やインターネットの情報を参考にしてください。なお、環境構築に不安があるけれどもとりあえずR言語を使ってみたいという方には [Google Colaboratory] の利用をおすゝめします。 "],["表記ルール.html", "表記ルール", " 表記ルール 本書では以下の表記ルールを用いています。 対象 表記方法 表記例 ハイパーリンク []付きで表記 [Google] パス名、ファイル名 モノフォント（タイプライタフォント） sample/sample.Rmd パッケージ名 太字のモノフォント tidyverse 関数（オブジェクト）名 モノフォントで()付き表記 print() コード モノフォント（プロンプトなし） library(tidyverse) コードの実行結果 モノフォント（## プロンプトあり） ## output... キーボードでのキー入力 モノフォントで[]付きで表記 [Ctrl]+[S] 数式 数式（math mode） \\(y = ax^2 + b\\) $ $ "],["なぜ-r-を使うのか.html", "なぜ R を使うのか", " なぜ R を使うのか データ分析を行うためには適切な分析ツールが必要不可欠です。[R言語] は統計分析に特化しているオープンソースの言語でデータ分析に最適なツールのひとつです。R がデータ分析に向いている理由をまとめているのが [“Six Reasons To Learn R For Business”, R Blogger] です。 R Has The Best Overall Qualities R Is Data Science For Non-Computer Scientists Learning R Is Easy With The Tidyverse R Has Brains, Muscle, And Heart R Is Built For Business R Community Support R はデータ分析に必要となるデータのハンドリングや可視化、モデリング、そして、レポーティングといった様々な機能を無料で利用することができます。また、R は逐次実行のインタプリタ型言語ですのでソフトウェアメトリクス分析のような探索的分析（Exploratory data analysis）に適していると言えます。さらに、非常にフレンドリーかつ活発なコミュニティーが日本でも形成されていますので、悩んだ時などに気軽に質問・相談ができるのも大きな強みです。 "],["分析の手順.html", "分析の手順", " 分析の手順 では、R を使った分析とはどのような手順になるかを簡単に見てみましょう。R は分析のための単なるツールですので、データ分析の常套手段してはツールに関係なく最初に分析対象となるデータがどのような分布なのか、どのような値の範囲にあるのか、全てのデータが揃っているかなどを俯瞰することからはじめます。 例えば「フィッシャーのあやめ（Fisher’s or Anderson’s iris）」を例にとってみましょう。「フィッシャーのあやめ」はRの例題でよく使われる下記のような150行のデータセットでRに標準で組み込まれています。 このデータセットの主な要約統計量は以下のようになり、Sepal（萼片）よりPetal（花弁）の方が小さい傾向にあると推測できます。 ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## この要約の通りか箱ひげ図を描いて確かめてみますが、元のデータ形式では都合が悪いので以下のように変形しておきます。 変形したデータを使って部位別の箱ひげ図を描くと確かに Petal（花弁）の方が Sepal（萼片）よりも小さい傾向にあることが分かります。 Fig 0.1: 花弁と萼片の分布 次に花弁と萼片の幅と長さの関係を見ると花弁の幅と長さに相関関係があるように見えます。 Fig 0.2: 幅と長さの関係 そこで、花弁の幅と長さの回帰関係を求めてみます。 ## ## Call: ## lm(formula = Petal.Length ~ Petal.Width) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.33542 -0.30347 -0.02955 0.25776 1.39453 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.08356 0.07297 14.85 &lt;2e-16 *** ## Petal.Width 2.22994 0.05140 43.39 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4782 on 148 degrees of freedom ## Multiple R-squared: 0.9271, Adjusted R-squared: 0.9266 ## F-statistic: 1882 on 1 and 148 DF, p-value: &lt; 2.2e-16 モデルの当てはまり具合が良さそうなので、回帰関係を可視化してみます。ついでに萼片の方も可視化してみます。 Fig 0.3: 幅と長さの関係 実際にはこれだけではデータ分析はできませんので、分析対象を これがデータサイエンスワークフロー（Data Science Workflow）と呼ばれる分析フローです。 "],["data-science-workflow.html", "Data Science Workflow", " Data Science Workflow データ分析の方法は様々ですが、そのプロセスは下図のように抽象化することができます。 Fig 0.4: Data Science Workflow, CC BY-NC-ND 3.0 US, Hadley Wickham この図は「Data Science Workflow」と呼ばれ、R コミュニティに多大な貢献をしている Hadley Wickham がその著書 『R for Data Science』 で提唱している概念図です。本書は、この Data Science Workflow に基づくページ構成になっており各プロセスのスコープ概略は下記の通りです。 Program データ分析のすべてのプロセス（Tidy 〜 Communicate/Automate）で必要となるツールがプログラミングです。プログラミングを覚えることで効率的に分析処理を行えるようになります。 Import 分析対象となるデータを分析環境に取り込み分析をできるようにするのがインポートプロセスです。データは様々な形式（文字コード、ファイル形式など）で保存されていますので、それらに見合った方法でインポートする必要があります。 Tidy インポートしたデータは必ずしもデータ分析に適した形式になっているとは限りませんので、一貫した形式（Tidy data）に整理します。 Tidy data はデータ分析において重要な概念です。 Transform 整理したデータ（Tidy data）がそのまま状態でデータ分析に使えることは稀です。不要なデータを削除したり（クレンジング）、必要なデータだけに絞り込んだり、新しい変数を計算したりする必要があります。 Tidy プロセスと合わせて Wrangle や Data wrangling、前処理と呼ばれることもあります。 Visualize データを可視化することは様々な示唆を得ることと同義といえます。分析方針を考えるためにもデータがどういう傾向をもっているのかを把握するためのプロセスともいえます。 Model 可視化で得られた情報を元に数式可（モデル化）するのプロセスです。モデルは様々な Communicate 分析結果を他人に伝えるためのプロセスです。結果を他人に伝えるだけでは不十分で 再現可能性（Reproducible research） が伴っていることも求められます。 3つの再現可能性 "],["tidyverse-eco-system.html", "Tidyverse Eco System", " Tidyverse Eco System このような Data Science Workflow を R で実現するための手段が Hadley Wickham により開発された tidyverse パッケージ群による Tidyverse Eco System です。tidyverse "],["分析環境.html", "Chapter 1: 分析環境", " Chapter 1: 分析環境 R について学ぶ際には R が使えるような環境を構築しておくべきです。しかし、環境構築は初学者にとって最も厄介な作業でもあります。そこで、本書では環境構築の必要がない [Google Colaboratory] を利用します。R/RStudio 環境を構築できる方はそちらを利用しても構いません。 "],["r-の主な分析環境.html", "1.1 R の主な分析環境", " 1.1 R の主な分析環境 1.1.1 R/R Commander(Rcmdr) コードを記述する必要がない代わりに実行できる機能（関数）が限定され、GUI による対話形式で R を使えるのが [R Commander（以降、Rcmdr）]です。Rcmdr は R のパッケージとして提供されていますが、OS により使える機能（メニュー）が若干異なるようで、基本的には Windows 環境での利用をおすゝめします。ちなみに SQiP のメトリクス演習コースでは Rcmdr を利用してます。 Fig 1.1: Rcmdr, Ubuntu 1.1.2 R/RStudio Desktop Rcmdr は簡単ですが実行できる機能（関数）が限定されていること、GUI による対話形式のため操作手順の記録が残しにくいなどの難点があります。それらを解決する統合開発環境（IDE）が RStudio です。RStudio は R の IDE におけるデファクトスタンダードであり R のコードを記述するのに適したエディタを備えている R のパッケージをインストール・管理するためのパッケージマネージャを備えている [R Markdown] や [Pandoc] との連携による再現可能性を確保するための仕組みを備えている 外部リソースからのデータを取り込む仕組み（RStudio Connect）を備えている 複数の分析をプロジェクト単位で管理する仕組みを備えている [Git] などの外部プログラムと連携したソースの版管理の仕組みを備えている という特徴があり、R を用いた分析に最も適した分析環境と言えます。RStudio にはインストール環境に応じた複数のリリース形態がありますが、その中でも Desktop は OS 上のアプリケーションとして動作するため最も利用しやすいと言えます。 Fig 1.2: RStudio Desktop, Windows 1.1.3 R/RStudio Server RStudio Server はブラウザベースで動作する RStudio です。Linux 上で動作するサーバアプリケーションですが、Docker で動作させることも可能ですので複数の分析者で分析環境を統一したい場合などに適しています。 1.1.4 RStudio Cloud クラウド版の RStudio が RStudio Cloud です。RStudio Server Pro ベースのクラウドサービスですので、任意のバージョンの R に切り替えて使うことも可能です。無料プランでは利用時間が限定される点に注意してください。 Fig 1.3: RStudio Cloud 1.1.5 Google Colaboratory(R Engine) Google Colaboratory（以降、Google Colab）は、Googleアカウントを持っていれば誰でも利用可能な Python 向けの開発環境である Jupyter Notebook サービスです。Jupyter Notebook は Python 以外に R をエンジンして利用することができるため、この機能を利用することで利用時間の制限なく R の分析環境として使うことができますので初学者の方には最も適した分析環境と言えます。 Fig 1.4: Google Colab 1.1.6 R(R Console)/Editor(VisualStudio Code, GNU Emacs) R はインタプリタ（対話的に逐次実行する処理系）として提供されていますので、R 単体で動作させることが当然、可能です。単体で動作させた場合、ターミナルやコンソールと呼ばれるウィンドウベースで動作するため非常に使いにくい環境です。一方、プログラミングに慣れている方は自分の好みの使いなれたエディタで分析を行いたい場合が多いと思われます。 一部のエディタでは、このようば要望を満たすために R Conole との連携機能を提供しています。古くは Emacs 用の ESS や最近人気のある Microsoft の VisualStudio Code 用の機能拡張などが "],["r-basics.html", "Chapter 2: R Basics", " Chapter 2: R Basics Rの一番良いところは統計学者が作っているところだ。 Rの一番悪いところは統計学者が作っているところだ。 出典 と言われる R ですが、最たる特徴は統計処理に特化している点です。また、前出の Data Science Workflow 全体をカバーできるようになっており、データ構造の変換や特定の分析に対する数々のパッケージ、コマンド一つでグラフが描ける高度なグラフィクス、更には分析結果をレポーティングするための仕組みも用意されています。 データ分析をひとつの言語で一気通貫できるので覚えることは非常に多岐に渡りますが、初学者が R を学ぶ際には、まず、「ベクトル演算」を理解するのが一つのポイントだと考えます。 Fig 2.1: Google Colab での実行例 なお、チュートリアルを起動後、何も操作をしないで放置しておくと自動的にチュートリアルウィンドウがクローズします。クローズした場合は、再度、Run Document をクリックして再起動してください。 以降、見出しの括弧内の英語はチュートリアルの見出しと対応しています。 "],["基本的な演算basic-operations.html", "2.1 基本的な演算（Basic Operations）", " 2.1 基本的な演算（Basic Operations） まずは最も基本となる演算を行ってみましょう。 2.1.1 算術演算の基本 算術演算の基本である加減乗除算の四則演算は他のプログラミング言語や OS に付属の電卓アプリなどと同じです。 2.1.2 代入演算の基本 変数に演算結果を代入するには代入演算子（&lt;-）を用います。変数を使うための変数宣言は不要です。また、代入結果を確認（表示）するためには変数名だけを記述して実行します。 w &lt;- 1 + 2 x &lt;- 2 * 3 y &lt;- 3 - 4 z &lt;- 4 / 5 2.1.3 変数演算の基本 定数だけでなく変数同士、変数と定数の演算も可能です。ここでは変数同士および変数と定数の四則演算を行ってみます。 さらに変数同士の演習結果を変数に代入してみます。代入前後で変数の値を確認して変数がどのように変化するかのかを合わせて確認します。 w ## [1] 3 x ## [1] 6 w &lt;- w + x w ## [1] 9 x ## [1] 6 ##### Variables ############################################################### このように R での変数の扱いは非常にシンプルですが、簡単に変数を上書きできてしまう点に留意してください。 "],["予約語reserved-word.html", "2.2 予約語（Reserved word）", " 2.2 予約語（Reserved word） プログラミング言語には予約語（Reserved word）といわれるものがあり予約語は変数名として使えません。 R では以下が予約語になっています。 if, else, for, while, repeat, in, next, break, function, TRUE, FALSE, NULL, NA, NaN, Inf "],["変数variables.html", "2.3 変数（Variables）", " 2.3 変数（Variables） R での変数の扱い方について触れておきます。まず、変数名の命名規則ですが スタイルガイド に準拠して「英小文字、数字、アンダースコア」のみを使うことを推奨します。また、変数名は分かりやすい名称にするように心掛けてください。例えば number_int &lt;- 10L number_int ## [1] 10 なお、数字から始まる変数名は R の仕様により使用することができません。 1num &lt;- 100 2_string &lt;- &quot;foo&quot; ## Error: &lt;text&gt;:1:2: 想定外のシンボルです ## 1: 1num ## ^ また、予約語以外でも変数型や関数に使われているような名前を変数名にすることはおすゝめできません。 2.3.1 データ型 他の言語でも同じですが変数には値を入れることができます。データ型はどのような値（データ）が入っているかを識別するためのものです。R の代表的なデータ型には以下のようなものがあります。 型 クラス タイプ モード 格納モード 備考 実数型 numeric double numeric double 倍精度浮動小数点 整数型 integer integer numeric integer 複素数型 complex complex complex complex 論理型 logical logical logical logical Boolean型 文字型 character character character character 日付型 Date double numeric double Date型（POSIX型もあり） R は開発の経緯から様々な型の見かたがありますが、基本的に同じようなものだとと考えてください。書籍などでよく出てくる str（structure）関数が返す型は上表におけるクラスです。 2.3.2 変数型 前述のようなデータ型を持った値を入れる箱が変数です。変数には華表のような様々な形があります。中でも表形式のデータを扱えるデータフレーム型は R ならではの変数型といえます。また、R には他の言語ではよく見かけるスカラー型（一種類のデータ型の値を一つだけ格納できる変数型）はありません基本となる変数型はベクトル型になります。 変数型にもクラスがありますが、ベクトル型変数のクラスはデータ型のクラスと同じです。 変数の型 クラス 説明 ベクトル型 データ型に同じ 一種類のデータ型の値を任意の個数だけ格納できる変数型 因子型 factor, ordered 水準インデックスを持ったベクトル型変数 マトリクス型（行列型） matrix 二次元型の変数型（ベクトル型とは異なる型） アレイ型（配列型） array 多次元型の変数（ベクトル型とは異なる型） データフレーム型 data.frame データ型の異なる複数の等長ベクトル型を格納できる変数型 リスト型 list データ型の異なる複数のベクトル型変数を格納できる変数型 2.3.3 ベクトル型 ベクトル型は前述のように最も基本となる変数型です。ベクトル型変数を作成するには c 関数使います。代入して str 関数でクラス、長さ（値の個数）と値を確認してみます。 長さが \\(1\\) の場合は c 関数を省略できます。 x &lt;- 2L # 一つだけ代入（格納）する場合 `c` は省略可能です str(x) # 値が一つだけの場合は長さ表示が省略されます ## int 2 x &lt;- c(1, 2, 3) # 実数の 1 から 3 の三つの値が代入されます str(x) # []の部分が長さ表示です ## num [1:3] 1 2 3 文字（型）を代入する場合はクォート（ダブルまはたシングル）で囲みます。 x &lt;- c(&quot;1&quot;, &#39;2&#39;, &quot;3&quot;) # 文字として数字を代入してみます str(x) ## chr [1:3] &quot;1&quot; &quot;2&quot; &quot;3&quot; では文字（型）と数字（型）を混在させたらどうなるでしょう？ x &lt;- c(1L, 2, &quot;3&quot;) # 整数、実数、文字としての数字を代入してみます str(x) # 強制型変換により最も柔軟度の高い文字型になります ## chr [1:3] &quot;1&quot; &quot;2&quot; &quot;3&quot; エラーにはならずベクトル型変数は文字型クラスとして作成されます。これは強制型変換という処理が行われるためです。強制型変換は複数のデータ型が混在した場合により柔軟度の高いデータ型に変換する処理です。論理型、整数型、実数型、複素数型、文字型の順に変換されます。 便利ではありますが意図しない結果を招く可能性がありますので、このような変換があることは覚えておいてください。 2.3.4 因子型 因子型は名義尺度や順序尺度の変数を扱うのに便利な変数型です。因子型を作成するには factor 関数を使う順序なしの因子型と ordered 関数を使う順序ありの因子型があります。どちらも levels（水準） という属性がついているベクトル型です。 後述のデータフレーム型の中で使うと「層別」という処理が楽になります。 x &lt;- factor(c(&quot;A&quot;, &quot;B&quot;, &quot;AB&quot;, &quot;O&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;B&quot;)) str(x) ## Factor w/ 4 levels &quot;A&quot;,&quot;AB&quot;,&quot;B&quot;,&quot;O&quot;: 1 3 2 4 1 1 1 3 levels(x) ## [1] &quot;A&quot; &quot;AB&quot; &quot;B&quot; &quot;O&quot; ordered 型は levels に順序がついている点が factor 型と異なる点です。 x &lt;- ordered(c(&quot;A&quot;, &quot;B&quot;, &quot;AB&quot;, &quot;O&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;B&quot;)) str(x) ## Ord.factor w/ 4 levels &quot;A&quot;&lt;&quot;AB&quot;&lt;&quot;B&quot;&lt;&quot;O&quot;: 1 3 2 4 1 1 1 3 levels(x) ## [1] &quot;A&quot; &quot;AB&quot; &quot;B&quot; &quot;O&quot; 2.3.5 マトリクス型 マトリクス型は文字通り二次元配列を扱うための変数型です。作成するには matrix 関数を利用します。引数のベクトル型を列方向から二次元に展開します。 展開方向を変えるには byrow オプションを指定します。 数値だけでなく文字列も扱えます。 2.3.6 アレイ型 アレイ型は多次元配列を扱うのに便利な変数型です。作成するには array 関数を利用します。第一引数で指定したベクトル型のデータを第二引数で指定した構造（行, 列, 次元）にしたがって展開します。 展開は列方向のみで matrix 型にある byrow オプションはありません。また、第一引数のデータ数が足りない場合は先頭からリサイクルして展開します。 array(c(1:12), c(2, 3, 2)) ## , , 1 ## ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 ## ## , , 2 ## ## [,1] [,2] [,3] ## [1,] 7 9 11 ## [2,] 8 10 12 2.3.7 データフレーム型 データフレーム型は表形式のデータを扱うのに非常に便利な変数型です。列ごとに異なるデータ型の変数を格納することが可能ですので、データベースのテーブルのようなものです。ただし、全ての列において行数が同一でなければなりません。データフレーム型を作成するには data.frame 関数を用います。 x &lt;- data.frame(col1 = c(1:5), col2 = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;), col3 = c(10, 11, 12, 13, 14), col4 = c(TRUE, TRUE, FALSE, TRUE, FALSE)) str(x) ## &#39;data.frame&#39;: 5 obs. of 4 variables: ## $ col1: int 1 2 3 4 5 ## $ col2: chr &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; ... ## $ col3: num 10 11 12 13 14 ## $ col4: logi TRUE TRUE FALSE TRUE FALSE x ## col1 col2 col3 col4 ## 1 1 A 10 TRUE ## 2 2 B 11 TRUE ## 3 3 C 12 FALSE ## 4 4 D 13 TRUE ## 5 5 E 14 FALSE データフレーム型は列名を指定することが可能です。また、文字型のデータはデフォルトで因子型変数として扱われます。 2.3.8 リスト型 リスト型はデータフレーム型とは異なり不等長のベクトル型変数を格納できる変数型です。ベクトル型の他にもマトリクス型やデータフレーム型、リスト型地震を格納できる非常に柔軟な構造であるため様々な関数あが返り値と使っています。 x &lt;- list(c(1:10), c(0.5:5.5), seq(1, 4, 0.2), c(&quot;A&quot;, &quot;B&quot;, &quot;AB&quot;, &quot;O&quot;), x) str(x) ## List of 5 ## $ : int [1:10] 1 2 3 4 5 6 7 8 9 10 ## $ : num [1:6] 0.5 1.5 2.5 3.5 4.5 5.5 ## $ : num [1:16] 1 1.2 1.4 1.6 1.8 2 2.2 2.4 2.6 2.8 ... ## $ : chr [1:4] &quot;A&quot; &quot;B&quot; &quot;AB&quot; &quot;O&quot; ## $ :&#39;data.frame&#39;: 5 obs. of 4 variables: ## ..$ col1: int [1:5] 1 2 3 4 5 ## ..$ col2: chr [1:5] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; ... ## ..$ col3: num [1:5] 10 11 12 13 14 ## ..$ col4: logi [1:5] TRUE TRUE FALSE TRUE FALSE x ## [[1]] ## [1] 1 2 3 4 5 6 7 8 9 10 ## ## [[2]] ## [1] 0.5 1.5 2.5 3.5 4.5 5.5 ## ## [[3]] ## [1] 1.0 1.2 1.4 1.6 1.8 2.0 2.2 2.4 2.6 2.8 3.0 3.2 3.4 3.6 3.8 4.0 ## ## [[4]] ## [1] &quot;A&quot; &quot;B&quot; &quot;AB&quot; &quot;O&quot; ## ## [[5]] ## col1 col2 col3 col4 ## 1 1 A 10 TRUE ## 2 2 B 11 TRUE ## 3 3 C 12 FALSE ## 4 4 D 13 TRUE ## 5 5 E 14 FALSE "],["定数constant.html", "2.4 定数（Constant）", " 2.4 定数（Constant） 変数はその名の通り値を変更できますが、R には特別な意味を持った値を保持するための定数があります。なお、定数にもクラスがあります。 定数 クラス TRUE logical FALSE logical NULL NULL NA logical NaN numeric Inf numeric NULL を除く定数はデータ型のクラスですので強制型変換の対象となります。以下のような変換が行われますので注意してください。 c(10L, 2.5, 3 + 4i, TRUE, NaN, NA, Inf, -Inf) ## [1] 10.0+0i 2.5+0i 3.0+4i 1.0+0i NaN+0i NA Inf+0i -Inf+0i 2.4.1 NA の型 欠損値を示すNAには明示的にデータ型を示すためのバリエーションがあります。関数によっては明示的に NA を指定する必要がありますので覚えておいてください。 NA データ型 NA_integer_ 整数型 NA_real_ 実数型 NA_complex_ 複素数型 NA_character_ 文字型 "],["参照アクセスaccess-operators.html", "2.5 参照・アクセス（Access Operators）", " 2.5 参照・アクセス（Access Operators） 変数の中の値を参照する方法は変数型により多少異なりますが、基本的には参照演算子またはアクセス演算子と呼ばれる [ や $ を用います。 2.5.1 [ 演算子 [ 演算子はベクトル型系の要素を参照するための演算子です。例えば \\(5\\) 番目の値を参照するには以下のようにします。 x &lt;- c(1:10) x ## [1] 1 2 3 4 5 6 7 8 9 10 x[5] ## [1] 5 マトリクス型では、行・列・セルの三通りの参照が可能です。 x &lt;- matrix(c(1:12), nrow = 3) x ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 x[1, ] ## [1] 1 4 7 10 x[, 1] ## [1] 1 2 3 x[2, 3] ## [1] 8 アレイ型でも同様の参照が可能です。ただし、マトリクス型とは異なり次元が絡んできますので、表示は少しややこしくなります。以下の \\(2 \\times 2\\) の \\(4\\) 次元アレイで説明します。 x &lt;- array(c(1:16), dim = c(2, 2, 4)) x ## , , 1 ## ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 ## ## , , 2 ## ## [,1] [,2] ## [1,] 5 7 ## [2,] 6 8 ## ## , , 3 ## ## [,1] [,2] ## [1,] 9 11 ## [2,] 10 12 ## ## , , 4 ## ## [,1] [,2] ## [1,] 13 15 ## [2,] 14 16 第 \\(1\\) 次元を参照します。 x[, , 1] ## [,1] [,2] ## [1,] 1 3 ## [2,] 2 4 第 \\(1\\) 次元の \\(1\\) 行目を参照します。 x[1, , 1] ## [1] 1 3 第 \\(1\\) 次元の \\(1\\) 列目を参照します。 x[,1 , 1] ## [1] 1 2 全次元の \\(1\\) 行目を参照します。参照結果は列が各次元になる点に注意してください。 x[1, , ] ## [,1] [,2] [,3] [,4] ## [1,] 1 5 9 13 ## [2,] 3 7 11 15 全次元の \\(1\\) 列目を参照します。行の参照と同様に参照結果は列が各次元になります。 x[, 1, ] ## [,1] [,2] [,3] [,4] ## [1,] 1 5 9 13 ## [2,] 2 6 10 14 全次元の \\(1\\) 行 \\(1\\) 列目を参照します。 x[1, 1, ] ## [1] 1 5 9 13 2.5.2 $ 演算子 $ 演算子はデータフレーム型やリスト型の要素を参照するための演算子です。 x &lt;- data.frame(blood = c(&quot;A&quot;, &quot;B&quot;, &quot;A&quot;, &quot;O&quot;, &quot;A&quot;), age = c(18, 25, 22, 35, 19)) x ## blood age ## 1 A 18 ## 2 B 25 ## 3 A 22 ## 4 O 35 ## 5 A 19 x$blood ## [1] &quot;A&quot; &quot;B&quot; &quot;A&quot; &quot;O&quot; &quot;A&quot; さらに要素内を参照するには前述の [ 演算子と組み合わせます。 x$blood[3] ## [1] &quot;A&quot; ##### Operators ############################################################### リスト型を $ 演算子で参照するの場合は 要素が names 属性を持っていることが前提です。以下のリスト型変数では $ 表示の後ろに要素名が表示されいている blood, data が $ 演算子で参照可能です。 x &lt;- list(blood = c(&quot;A&quot;, &quot;B&quot;, &quot;AB&quot;, &quot;O&quot;), c(&quot;M&quot;, &quot;F&quot;), data = data.frame(blood = c(&quot;A&quot;, &quot;B&quot;, &quot;A&quot;, &quot;O&quot;, &quot;A&quot;), age = c(18, 25, 22, 35, 19))) str(x) ## List of 3 ## $ blood: chr [1:4] &quot;A&quot; &quot;B&quot; &quot;AB&quot; &quot;O&quot; ## $ : chr [1:2] &quot;M&quot; &quot;F&quot; ## $ data :&#39;data.frame&#39;: 5 obs. of 2 variables: ## ..$ blood: chr [1:5] &quot;A&quot; &quot;B&quot; &quot;A&quot; &quot;O&quot; ... ## ..$ age : num [1:5] 18 25 22 35 19 要素名が表示されていない二番目の要素を参照するには [[ 演算子を用います。 x[[2]] ## [1] &quot;M&quot; &quot;F&quot; さらに要素内の値を参照する場合は前述のデータフレーム型同様に [ 演算子を用います。 x$blood[2] ## [1] &quot;B&quot; x[[2]][1] ## [1] &quot;M&quot; "],["検査変換.html", "2.6 検査・変換", " 2.6 検査・変換 R では変数内に複数のデータ型が混在している場合は前述のように強制型変換が行われますので、タイポなどがあると知らぬ間に意図しないデータ型になっていることがあります。作成した変数のデータ型を検査するために is. 関数群が用意されています。 データ型 関数 備考 論理型 is.logical 整数型 is.integer 実数型 is.double 数値型 is.numeric 整数型または実数型の場合 TRUE 複素数型 is.complex 文字型 is.character 同様に変数型を検査するための is. 関数軍も用意されています。 変数型 関数 備考 ベクトル型 is.vector 因子型 is.factor or is.ordered マトリクス型 is.matrix アレイ型 is.array データフレーム型 is.data.frame リスト型 is.list 定数用の is. 関数群もあります。 定数 関数 備考 NULL id.null NULL値か否か NA is.na 欠損値か否か NaN is.nan 非数か否か inf is.infinit 無現値か否か（有限値か否かを確認する is.finit 関数もあり） "],["演算子operators.html", "2.7 演算子（Operators）", " 2.7 演算子（Operators） R はベクトル演算が可能ですので演算子は基本的にベクトル演算に対応しています。 演算子は単項演算子と二項演算子に大別できます。二項演算子には算術演算子、比較演算子、論理演算子、特殊演算子があります。等長のベクトル型変数どうし、もしくは、ベクトル型変数とスカラ型変数の間の演算が可能です。不等長のベクトル変数に対して二項演算子を利用した場合、足りない値は先頭からリサイクルされて演算されます。条件によってはワーニングも表示されませんので不等長のベクトル演算は注意してください。 c(1:10) * c(1:2) ## [1] 1 4 3 8 5 12 7 16 9 20 c(1:10) * c(1:3) ## [1] 1 4 9 4 10 18 7 16 27 10 、 ### 単項演算子 単項演算子は文字通り単項に作用する演算子です。単項演算子には算術演算子の -（マイナス）と論理型演算子の !（否定, NOT）があります。 x &lt;- c(1:5) x ## [1] 1 2 3 4 5 -x ## [1] -1 -2 -3 -4 -5 x &lt;- c(TRUE, TRUE, TRUE, FALSE, TRUE) x ## [1] TRUE TRUE TRUE FALSE TRUE !x ## [1] FALSE FALSE FALSE TRUE FALSE 2.7.1 算術演算子 算術演算子は基本中の基本とも言える四則演算子である加算、減算、乗算、除算、ならびに、べき算（べき乗算）、整数除算（商、剰余）の六つの演算子があります。 a &lt;- c(1:10) b &lt;- c(10:1) a ## [1] 1 2 3 4 5 6 7 8 9 10 b ## [1] 10 9 8 7 6 5 4 3 2 1 a + b # 加算 ## [1] 11 11 11 11 11 11 11 11 11 11 a - b # 減算 ## [1] -9 -7 -5 -3 -1 1 3 5 7 9 a * b # 乗算 ## [1] 10 18 24 28 30 30 28 24 18 10 a / b # 除算 ## [1] 0.1000000 0.2222222 0.3750000 0.5714286 0.8333333 1.2000000 ## [7] 1.7500000 2.6666667 4.5000000 10.0000000 a ^ b # べき乗算 ## [1] 1 512 6561 16384 15625 7776 2401 512 81 10 a %/% b # 整数除算（商） ## [1] 0 0 0 0 0 1 1 2 4 10 a %% b # 整数除算（剰余） ## [1] 1 2 3 4 5 1 3 2 1 0 2.7.2 比較演算子 Logical Operations 比較演算子は関係演算子とも呼ばれ、二変数の関係を調べる演算子です。同値関係を調べる等号記号や大小関係を調べる不等号などがこれにあたります。返り値は論理型となります。 小なり 大なり 小なりイコール 大なりイコール イコール ノットイコール &lt; &gt; &lt;= &gt;= == != 例えば以下の二つのベクトル型変数に対する比較を行ってみます。 a ## [1] 1 2 3 4 5 6 7 8 9 10 b ## [1] 10 9 8 7 6 5 4 3 2 1 a &lt; b ## [1] TRUE TRUE TRUE TRUE TRUE FALSE FALSE FALSE FALSE FALSE a &gt; b ## [1] FALSE FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE a &lt;= b ## [1] TRUE TRUE TRUE TRUE TRUE FALSE FALSE FALSE FALSE FALSE a &gt;= b ## [1] FALSE FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE a == b ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE a != b ## [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE 2.7.3 論理演算子 Boolean Operations 論理演算子はブール関数を評価するものです。論理積（AND）・論理和（OR）は演算対象により二種類の演算子があります。 演算 演算子 説明 論理積 &amp; AND（ベクトル演算用） 論理和 | OR,（ベクトル演算用） 排他的論理和 xor eXclusive OR（ベクトル演算用） 否定 ! NOT（単項演算子, ベクトル演算可） 論理積 &amp;&amp; 条件式における論理積 論理和 || 条件式における論理和 2.7.4 特殊演算子 特殊演算子は%文字と%文字で挟まれた演算子です。算術演算子の整数除算（商、剰余）厳密にいえば特殊演算子になりますが本資料では算術演算子として記載しています。 R では特殊演算子を用いて任意の演算を定義することができます。パッケージによっては特殊演算子を用意している場合もあります。 特殊演算子 演算内容 %*% 内積（スカラー積） %in% マッチング %o% 外積（ベクトル積） %x% クロネッカー積 2.7.5 演算子の優先順位 演算子の優先順位は下表の通りとなります。優先順位を変えたい場合は数学と同様に () を利用して明示的に優先順位を指定をしてください。下記以外はヘルプで Syntax を検索すると確認できます。 演算子 説明 順位 :: 名前空間へのアクセス 高 $ 要素へのアクセス（データフレーム型、リスト型） [], [[]] 要素へのアクセス（ベクトル型、マトリクス型、アレイ型、リスト型） ^ べき乗 - マイナス（単項演算子、+も使用可） : 等差数列（c(1:10）のような数列） %% 特殊演算子（二項演算子） *, / 乗算、除算（二項演算子） +, - 加算、減算（二項演算子） &lt;, &gt;, &lt;=, &gt;= 比較演算子（大小関係） ==, != 比較演算子（同値関係、大小関係と優先順位は同列） ! 否定（単項演算子） &amp;, &amp;&amp;, |, || 論理積、論理和（論理演算子） ~ フォーミュラ &lt;- 代入 低 "],["制御文.html", "2.8 制御文", " 2.8 制御文 制御文はプログラムの流れをコントロールするためのもので大抵の言語で予約語になっています。制御文には条件分岐と繰り返し（ループ）の二種類があります。 2.8.1 条件分岐 条件分岐には以下のようなものがあります。その他、パッケージなどで条件分岐のための関数が提供されています。 文・関数 説明 if else 基本的な条件分岐（予約語） switch 条件が多数に分岐する場合に便利（予約語） ifelse ExcelのIF関数に似た条件分岐（関数） 2.8.2 if, else if 文と else 文は最も基本的な条件分岐です。評価式には論理演算子または論理型変数を用います。コーディングスタイルとして以下のどちらも可能です。 x &lt;- FALSE if (x != TRUE) print(&quot;TRUE&quot;) else print(&quot;FALSE&quot;) ## [1] &quot;TRUE&quot; if (x == TRUE) { print(&quot;TRUE&quot;) } else { print(&quot;FALSE&quot;) } ## [1] &quot;FALSE&quot; if 文は入れ子にしたり else if 文として組み合わせて使うことも可能です。 x &lt;- 10L y &lt;- 5 if ((x &gt; 5) &amp;&amp; (y &lt; x)) { print(&quot;match, (x &gt; 5) &amp;&amp; (y &lt; x)&quot;) } else if ((x &gt; 5) &amp;&amp; (y &gt;= x)) { print(&quot;match, (x &gt; 5) &amp;&amp; (y &gt;= x)&quot;) } else { print(&quot;else&quot;) } ## [1] &quot;match, (x &gt; 5) &amp;&amp; (y &lt; x)&quot; 2.8.3 switch 分岐する条件の数が多い場合はif文でなくswitch*文を利用するのが便利です。if文と同じで評価式はTRUEかFALSEが単一で返るようにしなければなりません。注意しなければならないのは、引数により構文が異なる点です。 2.8.3.1 引数が整数の場合 引数に整数 \\(n\\) を指定した場合、\\(n\\) 番目の処理文の結果が返ります。 x &lt;- 2 switch(x, # 分岐のための引数 &quot;x is 1&quot;, # 1番目の処理文 &quot;x is 2&quot;, # 2番目の処理文 &quot;Error&quot;) # 3番目の処理文 ## [1] &quot;x is 2&quot; 注意しなければならないのは条件分岐数と一致しない場合は NULL が返される点です。 x &lt;- 5L is.null(switch(x, # 分岐のための引数 &quot;x is 1&quot;, # 1番目の処理文 &quot;x is 2&quot;, # 2番目の処理文 &quot;Error&quot;)) # 3番目の処理文 ## [1] TRUE 2.8.3.2 引数が文字の場合 一方、引数が文字の場合、if/else 文と同様の処理が行われます。if/else 文と異なるのは else 文に相当する分岐が途中になっていても正しく処理してくれる点です。 x &lt;- &quot;2&quot; switch(x, &quot;1&quot; = &quot;x is 1&quot;, # 引数が&quot;1&quot;と一致する場合（`if (x == &quot;1&quot;)` に等価） &quot;x is others&quot;, # 一致するものがない場合（`else` に等価） &quot;2&quot; = &quot;x is 2&quot;) # 引数が&quot;2&quot;と一致する場合（`if (x == &quot;2&quot;)` に等価） ## [1] &quot;x is 2&quot; 引数に整数を指定しても動作しますが、引数が整数の場合と同様の動きをします。 x &lt;- 3 switch(x, # 分岐のための引数が整数になると &quot;1&quot; = &quot;x is 1&quot;, # 1番目の処理文 &quot;x is others&quot;, # 2番目の処理文 &quot;2&quot; = &quot;x is 2&quot;) # 3番目の処理文 ## [1] &quot;x is 2&quot; 2.8.4 ifelse base::ifelse は予約語でなく関数です。if/else 文と異なるのはベクトル型の評価が一度に行える点です。第一引数に TRUE か FALSE が返る評価式であればベクトル型でも構いません。 ifelse(TRUE, 1, 0) 2.8.5 繰り返し 繰り返しは文字通り処理を任意の回数繰り返す場合に用いるもので予約語になっています。繰り返し文の処理は時間がかかるため R においては好ましくなく繰り返しは使わずベクトル演算で処理すべきと言われていますが、R-3.4.0 から JIT コンパイラと呼ばれる繰り返し処理の高速化がデフォルトで有効化されており今後は処理記述の流れが変わる可能性があります。処理の高速化についてはこちらの 参考資料 で確認してください。なお、繰り返し処理で注意すべき点は繰り返し文中では明示的に出力を指定しないと出力がなされない点です。 文 説明 for 条件式に与えたベクトルやリストが空になるまで任意の回数繰り返す while 条件式に与えた条件が成立している限り繰り返す repeat 無限に繰り返すが繰り返し処理中のbreak文で繰り返しを終了できる また、繰り返しを条件式以外で変更する処理用の文として以下が用意されています。これらも予約語です。 文 説明 next この文が実行された時点で強制的に次の繰り返し処理に入ります break この文が実行された時点で繰り返し処理を終了します 2.8.6 for for文は最も基本となる繰り返し処理で、条件式としてベクトルやリストを指定できる点が他の言語と異なる点です。 for (i in c(1:5, 7, 9:15)) { if (i == 4) { next } else if (i &gt;= 10) { break } else { print(as.character(i)) } } ## [1] &quot;1&quot; ## [1] &quot;2&quot; ## [1] &quot;3&quot; ## [1] &quot;5&quot; ## [1] &quot;7&quot; ## [1] &quot;9&quot; 2.8.7 while, repeat while文とrepeat文については、あまり使うこともないと思いますので省略します。 "],["import.html", "Chapter 3: Import", " Chapter 3: Import Import は Google Colab を利用する場合は［＋コード］（［Ctrl］+［M］+［Ctrl］+［B］）ボタンでコードを追加してコードブロックを挿入してからコードを記載します。コードブロックの移動や削除はブロック右側に表示されているサブメニューで行います。［＋テキスト］ボタンでテキストブロックを挿入すればコメントなどを書き込むことができます。 RStudio を利用する場合はメニューから［File］-［New File］-［R Notebook］を実行してR Notebook を作成します。キーボードショートカット［Ctrl/Cmd］+［Alt/Option］+［I］でコードチャンクを挿入しチャンクにコードを記述します。チャング以外にコメントなどを書き込むことができます。 "],["readr.html", "3.1 readr", " 3.1 readr "],["readxl.html", "3.2 readxl", " 3.2 readxl "],["pdftools.html", "3.3 pdftools", " 3.3 pdftools "],["tidy.html", "Chapter 4: Tidy ", " Chapter 4: Tidy "],["tidy-data.html", "4.1 Tidy Data", " 4.1 Tidy Data "],["longer.html", "4.2 longer", " 4.2 longer "],["wider.html", "4.3 wider", " 4.3 wider "],["transform.html", "Chapter 5: Transform ", " Chapter 5: Transform "],["filter.html", "5.1 filter", " 5.1 filter "],["rename.html", "5.2 rename", " 5.2 rename "],["select.html", "5.3 select", " 5.3 select 5.3.1 select helpers "],["mutate.html", "5.4 mutate", " 5.4 mutate "],["summarize.html", "5.5 summarize", " 5.5 summarize "],["base-r.html", "Chapter 6: Base R ", " Chapter 6: Base R "],["plot.html", "6.1 plot", " 6.1 plot "],["boxplot.html", "6.2 boxplot", " 6.2 boxplot "],["hist.html", "6.3 hist", " 6.3 hist "],["ggplot2.html", "Chapter 7: ggplot2", " Chapter 7: ggplot2 "],["test.html", "Chapter 8: Test", " Chapter 8: Test "],["linear-model.html", "Chapter 9: Linear model", " Chapter 9: Linear model "],["machine-learning.html", "Chapter 10: Machine Learning", " Chapter 10: Machine Learning "],["r-markdown.html", "Chapter 11: R Markdown", " Chapter 11: R Markdown "],["shiny.html", "Chapter 12: shiny", " Chapter 12: shiny "],["environments-2.html", "Chapter 13: Environments 2", " Chapter 13: Environments 2 R について学ぶ前に R が使えるように環境を構築する必要がありますが、環境構築は初学者にとって厄介な部分でもあります。そこで、本書では学習レベルに合わせて以下のように環境を使い分けることをおすゝめします。 学習フェーズ 環境 備考 基礎学習フェーズ Google Colaboratory 要Googleアカウント 応用学習フェーズ RStudio Cloud beta edition 環境を構築するための基本的な知識がある方は最初から RStudio Dekstop（以降、RStudio）を利用しても構いません。 "],["google-colaboratory.html", "13.1 Google Colaboratory", " 13.1 Google Colaboratory R の言語仕様など基礎的な学習フェーズでは環境構築の手間がかからないクラウド型の Google Colaboratory（以降、Google Colab）の利用をおすゝめします。Google Colab では Jupyter Notebook というデータ分析用のツールが使えます。ただし、デフォルトの状態で R を使うのは少し不便なので、以下の手順でファイルを準備します。 ブラウザで Google アカウントにログインする Google Colab を開く R 用のテンプレートファイルをアップロードする R のコードが実行できることを確認する アップロードしたファイルを Google ドライブに保存する 13.1.1 Login Google Google Colab は名前通り Google が提供しているサービスですので Google のアカウントを持っていることが前提になります。また、Chrome 系（含む Chromium 系）のブラウザで利用することをおすゝめします。 まず、ブラウザで Google のページを開きます。ページの右上に［ログイン］と表示されている場合は［ログイン］をクリックしてログインしておきます。 13.1.2 Open Google Colab Google で Google Colab を検索して Colaboratory - Google Colab のリンクをくと以下のような画面が表示されまます。 Fig 13.1: Google Colab, Theme: dark 画面テーマは右上の歯車ボタンから変更できます。 13.1.3 Upload Template Google Colab が立ち上がりましたら上部にあるメニュー ［ファイル］-［ノートブックをアップロード…］を実行します。 Fig 13.2: Upload notebook file アップロード用のダイアログが開きますので［GitHub］タブをクリックし、上段のライン（画像の青線部分）に下記の URL を入力します。入力後、右端にある虫眼鏡アイコンをクリックします。 https://gist.github.com/k-metrics/464ffbbd4d00e328560cd55966e7d4b8 Fig 13.3: Upload from GitHub テンプレートがアップロードされ表示されます。 13.1.4 Run R code テンプレートがアップロードできましたらテンプレートファイルの記述にしたがってコードを実行してみます。その際に下記のようなダイアログが表示されますが認証情報などを読み取ることはありませんので［このまま実行］をクリックしてください。 Fig 13.4: Warning dialog サーバ（ホスト型ランタイム）との接続するため実行までに多少時間がかかります。 13.1.5 Save File コードの実行が確認できましたらメニューの［ファイル］-［ドライブにコピーを保存…］を実行してコピーを Google Drive に保存します。以降、この保存したファイルを利用してください。 "],["rstudio-cloud-1.html", "13.2 RStudio Cloud", " 13.2 RStudio Cloud Google Colab では R Markdown などのレポーティング機能は使用できませんので、このような場合には クラウド上で RStudio が利用できる RStudio Cloud が便利です。RStudio Cloud は統合開発環境の RStudio だけでなく種々のチュートリアルコンテンツを備えています。 Fig 13.5: RStudio Cloud, beta 執筆時点では無償で利用することができ、無制限のプロジェクトとプライベートプロジェクトの作成が可能です。RStudio Cloud を利用するにはアカウントを取得するだけです。 ブラウザで RStudio Cloud を開く 右上の［sign up］をクリックする RStudio Cloud のアカウントを作成してサインアップするか、Google または GitHub のアカウントでログインする 13.2.1 Create Project RStudio Cloud ではプロジェクトという単位で分析を管理しますので、最初にプロジェクトを作成します。作成手順については RStudio Cloud メニューにある［Guide］で確認してください。ガイドは全て英語ですが、 Chrome 系のブラウザであれば「Google翻訳」機能拡張を用いれば日本語に翻訳表示できます。 プロジェクトを作成すると下図のような統合開発環境の RStudio が表示されます。RStudio 自体の説明は Appendix を参照してください。 Fig 13.6: Initial View 13.2.2 Install Packages RStudio Cloud の初期状態では R のパッケージは Base R しかインストールされていません。最も利用する tidyverse パッケージと rmarkdown パッケージをインストールするために右下のエリアにある Packages タブをクリックしてパッケージマネージャを表示させます。 Fig 13.7: Packages Manager 次にパッケージマネージャの上部に表示されている install ボタンをクリックし表示されたダイアログに tidyverse, rmarkdown と入力し［install］ボタンをクリックしてインストールします。 Fig 13.8: Install Dialog 以上で、RStudio Cloud の準備は完了です。 "],["install-rrstudio.html", "Appendix A: Install R/RStudio", " Appendix A: Install R/RStudio R について学ぶ前に R が使えるように環境を整えます。本書は R, RStudio, tidyverse/ パッケージならびにその他必要なパッケージの利用を前提としています。 R ならびに RStudio はマルチプラットフォーム対応（マルチOS対応）ですので Windows, macOS, Linux のどのプラットフォームを選択しても構いません。ただし、64bit プラットフォームであることが条件です。なお、日本語版 Windows では Windows が利用してる文字コード（CP932, Shift JIS）に起因する不具合が散見されています。日本語版 Windows 環境を利用する場合はその点を認識の上で利用してください。 環境を整えるための手順は以下のようになります。 手順 実施内容 備考 1 Rのインストール 64bit プラットフォーム 2 Rtoolsのインストール Winodws のみ 3 RStudioのインストール Desktop 版 4 パッケージのインストール tidyverse, rmarkdown 5 Gitのインストール 任意 Git は VCS(Version Control System) と呼ばれるソースの版管理を行うシステムです。必要な場合のみインストールしてください。 "],["install-r.html", "A.1 Install R", " A.1 Install R R は CRAN (The Comprehensive R Archive Network) と呼ばれる公式リポジトリから入手してインストールします。 CRAN には ミラーサイト も多数ありますので、利用しているインターネット環境に応じて近いサイトからダウンロードしてください。 よくある質問は FAQ(Frequently Asked Questions) にまとめられています。 A.1.1 Windows Winodws では特段の理由がない限り CRAN から最新バージョンをインストールしてください。 旧バージョンをインストールしたい場合は Previous Releases of R for Windows から当該バージョンをダウンロードしインストールしてください。 日本語によるインストール方法が必要な場合は非公式ページですが R初心者の館（RとRStudioのインストール、初期設定、基本的な記法など） などのサイトを参考にしてください。 A.1.1.1 Rtools Windows ではコンパイラなどの開発ツール類が標準装備されていませんので、 R のパッケージをインストールする際に必要となる Rtools と呼ばれるツールキットをインストールしておきます。 Building R for Windows のページからインストールした R のバージョン用の Rtools をダウンロードしてインストールしてください。なお、インストールの際はデフォルトオプションでインストールしてください。インストールディレクトリなどを変更すると正しく動かない場合があります。 A.1.2 macOS (OS X) macOS ではインストールできるバージョンが限られていますので CRAN で確認の上でインストールしてください。 A.1.3 Linux R がサポートしているディストリビューションは Debian, RedHat, Suse, Ubuntu のみです。Fedora を利用したい場合には README を参照の上で RedHat Software のリポジトリからインストールしてください。 Linux の場合、ディストリビューションごと・バージョンごとにインストール方法が異なりますので各ディストリビューション用のディレクトリ内の README ファイルを参考にインストールしてください。 "],["install-rstudio-desktop.html", "A.2 Install RStudio Desktop", " A.2 Install RStudio Desktop R のインストールが完了しましたら統合開発環境（IDE）である RStudio Desktop をインストールします。 Downloadページ から使用している環境（OS）用の RStudio をダウンロードしてインストールしてください。 A.2.1 動作確認 RStudio のインストールが完了したら RStudio を起動します。下図のようなウィンドウが立ち上がり左側の Console ペインに R のバージョンなどが表示されます。 Console ペインのプロンプト（&gt;表示）の部分に2 * 3と打ち込んで［Enter］キーを押し[1] 6と表示されることを確認してください。 2 * 3 [1] 6 "],["install-r-packages.html", "A.3 Install R packages", " A.3 Install R packages 次に必要となるいくつかのパッケージをインストールします。パッケージをインストールする場合はインターネットに接続されている必要があります。 Console ペインのプロンプトに以下のコードを入力し [Enter]キーを押して実行します。 install.packages(&quot;tidyverse&quot;) インストールが終わりましたらパッケージが正しくインストールされていることを確認するために Console ペインに以下のコードを入力して実行します。 library(tidyverse) 以下のようなメッセージが表示されることを確認します。インストール時期によってはバージョン表記などが下記と異なる場合があります。なお、日本語版 Windows 環境では一部の文字が化けします。 Loading required package: tidyverse ─ Attaching packages ─────────────────────────────── tidyverse 1.3.0 ─ ✔ ggplot2 3.2.1 ✔ purrr 0.3.3 ✔ tibble 2.1.3 ✔ dplyr 0.8.3 ✔ tidyr 1.0.0 ✔ stringr 1.4.0 ✔ readr 1.3.1 ✔ forcats 0.4.0 ─ Conflicts ───────────────────────────────── tidyverse_conflicts() ─ ✖ dplyr::filter() masks stats::filter() ✖ dplyr::lag() masks stats::lag() 続いて rmarkdown パッケージをインストールします。tidyverse パッケージのときと同様に以下のコードを Console ペインに入力して実行します。 install.packages(&quot;rmarkdown&quot;) A.3.1 Linux環境の場合 Linux環境ではプラットフォーム側のライブラリなどが足りずにパッケージのインストールが完了できない場合があります。その場合は RStudio Package Manager, demo site にてインストールしたいパッケージが必要とするライブラリなどを確認、インストールしてから再度パッケージをインストールしてください。 例えば Ubuntu 18.04LTS で R に tidyverse パッケージをインストールする場合には以下のようなライブラリなどがOS側にインストールされている必要があります。 apt-get install -y libicu-dev apt-get install -y make apt-get install -y libcurl4-openssl-dev apt-get install -y libssl-dev apt-get install -y pandoc apt-get install -y libxml2-dev "],["install-git.html", "A.4 Install Git", " A.4 Install Git RStudio にはソースコードの版管理を行うインタフェースが標準で用意されていますが、版管理システム（以降、VCS）を別途インストールする必要があります。RStudio で利用できる VCS は以下の二つです。 Git Subversion(SVN) どちらを利用しても構いませんが GitHub などのクラウドサービスが充実している Git の利用をおすゝめします。 A.4.1 Git Windows および macOS は Gitの ダウンロードページ から最新バージョンをダウンロードしてインストールします。Linux はリポジトリからインストールするか ダウンロードページ から最新バージョンをダウンロードしてインストールしてください。 A.4.2 Git Client RStudio には簡易的な Git のクライアント機能が標準で用意されていますが、きめ細かな操作を行いたい場合には Git の GUI クライアントをインストールしてください。代表的な Git Client を以下に列挙しておきます。 Git GUI Client Ubuntu Mac Windows Memo GitKraken Yes Yes Yes Free版は機能制限あり SmartGit Yes Yes Yes Free版でも機能制限なし1 GitEye Yes Yes Yes Sourcetree No Yes Yes 日本語版あり GitHub Desktop No Yes Yes 1 : 非商用利用の場合 "],["rstudio-server.html", "Appendix B: RStudio Server", " Appendix B: RStudio Server R/Rstudio Desktop は前述のようにマルチプラットフォーム対応ですがプラットフォームごとに以下のような制約があります。 日本語版 Windows 環境では文字コード（CP932, Shift JIS）が原因で日本語を正しく処理できない事例が散見される 18.04LTSより前の Ubuntu 環境では RStudio Desktop で日本語入力ができない * 有志による日本語入力パッチ（非公式パッチ）はあり macOS 環境ではグラフの日本語が文字化けする * いわゆる豆腐文字問題 特に日本語版 Windows 環境での問題は Windows が利用している文字コード（CP932, Shift JIS） に起因しているため問題は根本的な解決を期待できません。詳細については伝説とも言われている「Why are you using SJIS?」というキーワードで検索してみてください。 日本語版 Windows 環境における文字コード問題を回避するためには、 RStudio Server を利用する方法が考えられます。 RStudio Server は Linux 環境で動作する Web サーバベースの IDE ですが、 Docker のコンテナ技術を利用することで Windows や macOS 環境で動作させることが可能です。 OS Docker app System Requirements macOS Docker Desktop for Mac refer docker docs Windows Docker Desktop for Windows Hyper-V(Windows10 64bit Pro or Higher) or WSL21 1 WSL2 は Windows10 version 2004 から利用可能になる予定です "],["setup-rstudio-sever-with-docker.html", "B.1 Setup RStudio Sever with Docker", " B.1 Setup RStudio Sever with Docker Windows または macOS 環境で Docker を利用し RStudio Server を起動するためには以下の手順が必要です。 手順 実施内容 備考 1 Hyper-V の有効化 Windows のみ 2 Docker Desktop のインストール 3 Docker Image のダウンロード 4 Docker Container の起動 なお、Linux 環境での手順は割愛します。 B.1.1 Enable Hyper-V (Windows Only) Windows 環境ではインストールする前に Hyper-V を有効にする 必要があります。 B.1.2 Download and Install Docker Desktop 利用している環境に応じた Docker Desktop をダウンロードしてインストールします。なお、ダウンロードには docker hub でアカウント登録が必要です。 詳細な手順や設定方法は Docker docs を参照してください。 B.1.3 Download Docker Image Docker Desktop をインストール・起動しましたら RStudio Server の Docker Image をダウンロードします。様々な方が RStudio Server の Docker Image を公開されていますが代表的な Docker Image には次のようなものがあります。 Image Description rocker/tidyverse Version-stable base R and RStudio, tidyverse, devtools rocker/verse Adds TeX and related packages to rocker/tidyverse ykunisato/paper-r-jp Dockerfile of writing paper by R Markdown kmetrics/jverse Japanized rocker/verse rocker は準公式とも言えるような R に関連する Docker Image を継続的に提供しているプロジェクトです。様々なイメージを提供していますが残念ながら日本語フォントの追加などの日本語対応がなされていません。グラフで日本語を利用しない限りは rocker のイメージを利用しても何ら問題はありません（ソースなどの表示はブラウザに依存しているのでコードに日本語を記述することが可能です）。 グラフで日本語を利用したい場合は著者が rocker/verse に日本語フォントなどを追加して日本語対応させた kmetrics/jverse を利用するか rocker が公開している Dockerfile を改修して日本語対応させたイメージを利用してください。 利用する Docker Image を決めたらコンソール（コマンドプロンプト）で以下のコマンドを実行してイメージをダウンロードしてください。 docker pull rocker/tidyverse B.1.4 Run Container "],["rstudio-ide.html", "Appendix C: RStudio IDE", " Appendix C: RStudio IDE データ分析勉強会では長らく R Commander（以降、Rcmdr） が利用されています。勉強会の母体となっている SQiP研究会 のソフトウェアメトリクスに関する演習コースでも同様です。これはプログラミングに縁の薄いソフトウェア品質管理技術者が短期間で R を用いた分析を行えるようにとの配慮からです。実際、 Rcmdr はコードを記述しなくてもデータの可視化や分析ができますのでデータ分析の初学者にとっては R の恩恵を簡単に受けられる非常に便利な道具です。 しかし、Rcmdr は R のごく一部の関数を GUI で使えるようにしたラッパープログラムですので、できることが非常に限られています。加えて GUI 操作なため操作自体が記録に残りません。つまり、探索的にデータを分析を行ってもその手順分析者の記憶に依存してしまいますので分析再現性の観点から見ると好ましい分析環境とは言えません。 本格的な探索的データ分析を行うには、出来ることが限られる Rcmdr ではなく R のスクリプトを用いるべきです。しかし、 R 本体（R Console）は非常に機能が限られていますので、それだけで探索的データ分析を行うのは非常に困難です。そこで、初学者には様々な機能を予め備えている統合開発環境（IDE - Integrated Development Environment）を利用をおすゝめします。 R 用統合開発環境のデファクトスタンダードと言えるのが RStudio, PBC の RStudio IDE （以降、RStudio） です。無償版である Open Source Edition でも全ての基本的な機能を利用できます。 初学者にとって RStudio には以下のような便利な機能があります。 補完機能が強力 関数名・変数名・パッケージ名などを補完してくれますので入力負荷が大幅に減ります エディタ機能が強力 キーひとつでヘルプの参照が可能ですので即座に疑問が解決できます 部分的にコードを実行できますので手順を確認しながらコーディングできます Markdown 記述が使えますので分析と報告書作成を同時に進められます コードの直下に実行結果を表示することができますのでコードと実行結果の関係性が一目でわかります パッケージ管理が分かりやすい インストールされているパッケージが一目でわかります パッケージの検索・読込み・インストールが GUI 操作で簡単にできます その他の便利な機能 作成した変数を一覧で確認できると共に値も確認できます プロジェクト管理機能が使えますので分析ごとにファイルなどをセパレートできます バージョンコントロールシステムを用いた履歴管理ができます Python などの他言語もサポートしています 上記は機能のほんの一部を紹介したにすぎません。 RStudio は R を利用した探索的データ分析を効率的かつ強力にしかも無償でサポートしてくれる道具です。 "],["overview.html", "C.1 Overview", " C.1 Overview RStudio を起動すると以下のような画面が表示されます。画面は大きく以下の四つのエリアに分割されており、左上の A のエリアはソースエディタが表示されるエリアなので初めて起動した際には表示されません。 Fig C.1: RStudio Desktop, Windows 各エリアのサイズ（ウィンドウ内での比率）は任意に調整できますが、横幅に関しては A と B 、 C と D が常に同サイズとなります。各エリアにはペインと呼ばれるタブ切り替え型のサブエリアが表示されます。ペインは常時表示されるペイン（下図の黒文字）と機能が呼び出されたり利用を設定している場合にのみ表示されるペイン（下図の灰文字）があります。 Fig C.2: RStudio Pane Layout, Windows RStudio のバージョンにより多少ペイン構成が異なりますが以下のペインが用意されています。これらのペインはグローバルオプションで表示位置の変更や表示・非表示の切り替えができます。 No Area Pane name Descriptions 1 A (File name) ソースエディタ（ファイルが開かれていない場合は未表示） 2 A (Data name) データフレーム型の変数などを表示するデータビューア 3 B Console 文字通りRのコンソール（実行結果の表示だけでなくここから実行することも可） 4 B Terminal OS のターミナル（RStudio v1.1から） 5 B R Markdown R Markdown ファイルをレンダリングした際にレンダリング情報を表示 6 B Jobs ローカルジョブの実行マネージャ（RStudio v1.2から） 7 C Environment オブジェクト（変数、関数）の表示と参照ができる環境マネージャ 8 C History 実行履歴マネージャ（コンソールでの実行、ソースからの実行共に記録） 9 C Connections データソース接続マネージャ（RStudio v1.1から） 10 C Build ビルドツール（プロジェクトオプションで有効にしている場合のみ） 11 C Git or SVN 簡易VCSクライアント（プロジェクトオプションでVCSを有効にしている場合のみ） 12 D Files 簡易なファイルマネージャ 13 D Plots グラフィック専用プロットエリア（ヒストリ機能、出力機能付き） 14 D Packages パッケージ管理を行うためのパッケージマネージャ 15 D Help ヘルプビューア（ソースエディタやコンソールと連動したヘルプ表示が可） 16 D Viewer HTML等の表示が可能なビューア "],["keyboard-shortcuts.html", "C.2 Keyboard Shortcuts", " C.2 Keyboard Shortcuts キーボードショートカットは効率的なコーディングに役立ちますので、最低限、以下のショートカットを覚えましょう。 Keyboard Shortcuts Description ［TAB］ 入力中のコード（オブジェクト）を補完 ［Alt/Option］+［-］ 代入演算子（&lt;-）をカーソル位置に挿入する ［Ctrl/Cmd］+［Shift］+［M］ パイプ演算子（%&gt;%）をカーソル位置に挿入する ［Ctrl/Cmd］+［Shift］+［C］ 選択行をコメント・アンコメントする（トグル動作） ［Ctrl/Cmd］+［Alt/Option］+［I］ カーソル位置にコードチャンクを挿入する（R Markdownのみ） ［Ctrl/Cmd］+［Enter］ 選択したコードを実行する（行選択、部分選択どちらも可） ［Ctrl/Cmd］+ [Shift] +［Enter］ コードチャンク内の全てのコードを実行する（R Markdownのみ） ［F1］ 選択またはカーソル位置の関数のヘルプを呼び出す ［Ctrl/Cmd］+［F］ アクティブなペイン内の検索 上記以外のショートカットはメニュー［Tools］-［Keyboard Shortcuts Help］を選択すると表示できます。 "],["writing-r-code.html", "C.3 Writing R code", " C.3 Writing R code では、実際に RStudio を利用して簡単なコードを書いてみましょう。初学者が学習のために R のコードを記述するには R Notebook 形式が便利です。 R Notebook 形式は マークダウン言語とコードを混在できる R Markdown 形式を簡易にしたものです。コード以外に説明などを記述できるのでアウトプットしながらの学習が可能です。 R Notebook 形式を使うにはメニューから［File］-［New File］-［R Notebook］を実行します。すると下図のようなソースエディタ（以降、エディタ）が開きます。 Fig C.3: R Notebook file この時点ではファイルとして保存されていませんので、メニューから［File］-［Save As…］を実行して適当な場所に適当な名前で保存しておきます。ここでは test という名前を入力して保存します。ファイルの拡張子が自動的に付与されますのでタブの表示は test.Rmd となります。 Fig C.4: R Notebook saved file ファイルを保存したら 6 行目の「This is an …」から 18 行目の「in the editor is displayed.」までを削除し、カーソルの位置（6 行目）でキーボードショートカット［Ctrl/Cmd］+［Alt/Option］+［I］を押下してコードを記述するためのブロックを挿入します。 Fig C.5: R Notebook insert chunk すると上図のように三連のバッククォート（```）で囲まれたブロックが挿入されます。このブロックはコードチャンクと呼ばれる R のコードを記述する部分です。コードチャンクの前後は自由な記述が出来ますので、以下のように入力してみてください。 Fig C.6: R Notebook first code 上図のように R Notebook では説明とコードを混在することができます。では、コードチャンクの右上にある緑色の三角マークをクリックしてコードを実行してみましょう。 Fig C.7: R Notebook run code コードチャンクの下と Console ペインに実行結果が表示されます。コードチャンクの下に実行結果が表示されない場合は下図のように歯車アイコンをクリックし表示したメニューから Chunk Output Inline にチェックをつけ、再度、緑色の三角マークをクリックしてコードを実行してください。コードチャンクの下に実行結果が表示されます。 Fig C.8: R Notebook option 最後にフロッピーディスクアイコンをクリックするかキーボードショートカットの［Ctrl/Cmd］+［S］を押下してファイルを保存しておきます。 "],["global-options.html", "C.4 Global Options", " C.4 Global Options メニュー［Tools］-［Global Options…］を選択すると表示できます。以降に推奨設定項目を記載しておきますので参考にしてください。記載されていないオプションはお好みで設定してください。 C.4.1 General Genelal オプションは RStudio の全般的な動作に関する設定です。 Basic と Advanced の二種類の設定がありますが、初学者の方は Basic のみ以下のように設定しておくと便利です。 大項目(Tab) 中項目(太文字) 設定項目 推奨設定 Basic R Sessions R version Default（Windows only） Basic R Sessions Default working directory 任意のディレクトリ Basic R Sessions Restore most recently opened project at startup Unchecked Basic Workspace Restore .RData into workspace at startup Checked Basic Wrokspace Save workspace to .RData on exit “Ask” or “Always” Basic Ohter Automatically notify me of updates to RStudio Checked 特に “Default working directory” はプロジェクトを作成・管理するディレクトリに設定しておくと便利です。 C.4.2 Code Code オプションはソースエディタの動作に関する設定です。ソースの記述は スタイルガイド（The tidyverse style guide） に準拠することをおすゝめしますので、設定例もスタイルガイドに沿ったものになっています。なお、 Python などの他言語を併用する場合は適切な設定に変更してください。 大項目(Tab) 中項目(太文字) 設定項目 推奨設定 Editing General Insert spaces for tab Checked Editing General Tab width 2 Editing General Auto-detect code indentation Checked Editing General Insert matching parens/quotes Checked Editing General Auto-indent code after paste Checked Editing General Vertically align arguments in atuo-indent Checked Editing General Surround selection on text insertion “Quotes &amp; Brackets” Editing Execution Always save R scripts before sourcing Checked Editing Execution Ctrl+Enter executes “Multi-line R statement” Display General Highlight selected word Checked Display General Highlight selected line Checked Display General Show line numbers Checked Display General Show margin Checked Display General Margin coloumn 80 Display General Show whitespace characters Checked Display General Show syntax highlighting in console input Checked Saving General Restore last cursor position when opening file Checked Saving Serialization Line ending conversion “Posix (LF)” Saving Serialization Default text encoding “UTF-8” C.4.3 Appearance Appearance オプションは RStudio の見た目に関する設定です。フォント設定のみ日本語の固定ピッチフォントに変更し、その他はお好みでどうぞ。 大項目(Tab) 中項目(太文字) 設定項目 推奨設定 N/A N/A Editor font 任意の日本語等幅フォント 日本語等幅フォントは好みで構いませんが、無償ダウンロード可能な以下のフォントがおすゝめです。 BIZ UDゴシック（macOS, Windows） - MORISAWA PASSPORT Source Han Code JP（Linux, macOS） - SIL Open Font License IPAゴシック（Linux, macOS, Windows） - IPA フォントライセンス なお、日本語版 Windows の RStudio では一部の日本語等幅フォントを正しく表示できないバグがあるようですので、フォントの選択には注意してください。 C.4.4 Pane Layout Pane Layout オプションは前述のペインの表示場所や表示・非表示を変更するためのオプションですので、初学者はデフォルト設定のまま利用することをおすゝめします。 C.4.5 Packages Packages オプションはパッケージマネジメントに関する設定です。 Management と Development の二種類の設定がありますが、Development はパッケージ自体を開発するためのオプションですので Management のみ設定してください。 大項目(Tab) 中項目(太文字) 設定項目 推奨設定 Management Package Management Primary CRAN repository 任意のhttpsサイト1 Management Package Management Enable packages pane Checked Management Package Management Use secure download method for HTTP Checked Management Package Management Use Internet Explorer library/proxy for HTTP Checked 2 1 ネットワーク的に最も速い（近い）サイトを選んでください 2 プロキシサーバーを利用している場合に設定してください C.4.6 R Markdown R Markdown オプションは R Markdown に関する設定です。 大項目(Tab) 中項目(太文字) 設定項目 推奨設定 N/A R Markdown Show inline toolbar for R code chunk Checked N/A R Markdown Enable chunk background highlight Checked N/A R Markdown Show output preview in “Viewer Pane” N/A R Markdown Show output inline for all R Markdown documents Checked N/A R Markdown Show equation and image previews “Inline” or “In a popup” N/A R Markdown Evaluate chunks in directory “Document” N/A R Notebooks Execute setup chunk automatically in notebooks Checked N/A R Notebooks Hide console automatically when executing notebook chunks Checked C.4.7 Sweave Sweave オプションは R + LaTeX によるドキュメント作成に関する設定です。 Sweave を利用しない限り基本的に変更する必要はありませんが、 R Markdown で PDF ファイルを作成する場合は PDF ビューアに関する設定のみお好みのビューアを設定してください。 大項目(Tab) 中項目(太文字) 設定項目 推奨設定 N/A PDF Preview Preview PDF after compile using お好みのビューア C.4.8 Spelling Spelling オプションはスペルチェックのための設定です。UK または US の English を指定するのが無難です。 C.4.9 Git/SVN Git/SVN オプションはバージョンコントロールシステム（VCS）に対する設定です。VCS を利用する場合のみ設定してください。 C.4.10 Publishing Publishing オプションは RStudio, Inc. が提供しているサービスへドキュメントを発行する場合に利用する設定ですので、当該のサービスを利用する場合のみ設定してください。 C.4.11 Terminal Terminal オプションは OS のターミナルを RStudio の Terminal ペインから利用するための設定です。Terminal ペインを利用する場合のみ設定してください。 大項目(Tab) 中項目(太文字) 設定項目 推奨設定 N/A Shell New terminals open with 任意のシェル N/A Connection Connect with WebSockts Terminalが起動しない場合はチェックを外す "],["project-options.html", "C.5 Project Options", " C.5 Project Options メニュー［Tools］-［Project Options…］を選択すると表示できます。 Build Tools と Git/SVN を除いて基本的にグローバルオプションと同一の設定で構いません。 Build Tools オプションは R Markdown Website や Bookdown を利用する場合に以下のように設定するのをおすゝめします。 大項目 中項目（太文字） 設定項目 推奨設定 Build Tools N/A Project build tools “Website” Build Tools N/A Preview book after building Checked Build Tools N/A Re-knit current preview when supporting files change Checked Git/SVN オプションは VCS を利用する場合に利用する VCS を選択してください。VCS がインストールされていない場合は有効にできません。 "],["cloud-ide.html", "Appendix D: Cloud IDE", " Appendix D: Cloud IDE 開発環境のクラウドサービス化も進んでいます。 "],["rstudio-cloud-ga.html", "D.1 RStudio Cloud GA", " D.1 RStudio Cloud GA RStudio Colud は RStudio, PBC が提供している RStudio Server によるクラウドサービスです。2020年2月末時点では無料プランでも無制限のプロジェクトならびにプライベートなプロジェクトの作成が可能です。また、 learnr パッケージを用いた初学者用のチュートリアルなど学習資料が多数用意されているのも特徴です。 Fig D.1: RStudio Cloud, beta ただし、無料プランで使えるリソースはメモリ 1GB ・ 1CPU と限られていますので、ナイーブ・ベイズのようなメモリを必要とする機械学習プログラミングなどには向いていません。なお、 Google Colab のように24時間でインスタンスが消滅するというようなことは無いようです。 "],["exploratory.html", "D.2 Exploratory", " D.2 Exploratory Exploratory は BI（Business Intelligence）BI（Business Intelligence）ツールのような操作で R を持ちた探索的データ分析（EDA）が行える利用できる専用クライアントアプリケーションを用いるクラウドサービスです。無料で利用できますがオンライン限定・パブリックシェアオンリーとなりますので注意してください。 何ができるのか見てみる ページで多数の分析サンプルが公開されています。 また、 使い方ガイド ページにも様々な説明資料が用意されています。 Fig D.2: Exploratory Public 価格 ページからお好みのプランを選んでアカウントを取得します。クライアントアプリケーションは、mac まはた Windwos でしか動作しません。 "],["binder.html", "D.3 binder", " D.3 binder binder は 実行環境の再現性を確保するためのクラウドサービスです。指定したGit のリポジトリから自動的に Jupyter Notebook のコード実行環境（Docker イメージ）を構築しクラウド上で実行することによりリポジトリにあるソースコードを動作さあせることができます。リポジトリに設定ファイルを置くことで RStudio Server や Shiny 環境を構築・実行することも可能です。 Google Colab や RStudio Cloud・Exploratoy などと異なりアカウントを取得する必要はありませんが、専用の環境を構築するわけではなく、あくまでも一時的な試用環境である点に注意してください。継続的に使える環境が必要な場合は ローカルに環境を構築するか RStudio Cloud のようなクラウドサービスを利用してください。 "]]
